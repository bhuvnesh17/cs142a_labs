// test functions with value must have return

func validReturn1(a:int) : int {
  return a;
}

func validReturn2(a:int) : int {
  if (true) {
    let a = 3;
  } else {
    return a;
  }
  return 4;
}

func missingReturn1(a:int) : int {
  if (true) {
    return a;
  }
}

func missingReturn2(a:int) : int {
  if (true) {
    return a;
  } else {
    let a = 3;
  }
}

func missingReturn3(a:int) : int {
  if (false) {
    let a = 3;
  } else {
    return a;
  }
}

func validReturn3(a:int) : int {
  while (false) {
    return a;
  }
  return a;
}

func missingReturn4(a:int) : int {
  while(true) {
    return a;
  }
}

func main() : void {
  ::printInt(8);
}

func validReturn4(a:int) : int {
  if (true) {
    return a;
  } else {
    let a = 3;
    return a;
    var b : int;
    let b = 3;
  }
}

func missingReturn5(a:int) : int {
  if (false) {
    let a = 3;
    while(false) {
      return 3;
    }
  } else {
    return a;
  }
}

func missingReturn6(a:int) : int {
  while(true) {
    if (false) {
      let a = 3;
    } else {
      return a;
    }
  }
}

func missingReturn7(a:int) : int {
      var b : int;
      let b = 3;
}


func validReturn5(a:int) : int {
  if (true) {
    return a;
  } else {
  }
  return a;
}

func missingReturn8(a:int) : int {
  if (true) {
    return a;
  } else {
  }
}

func missingReturn9(a:int) : int {
  while(true) {
    if (true) {
      return a;
    } else {
    }
  }
}

func validReturn6(a:int) : int {
  if (true) {
    return a;
  } else {
  }
  return a;
  while(true) {
    return a;
  }
}

// TODO add case with two returns after each other, the second one is dead code but should not interrupt.
// TODO test ifelse with empty else stmtblock
// TODO test return; while(true) {} should not destroy success
